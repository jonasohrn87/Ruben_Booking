// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ruben_Booking.API.Database;

#nullable disable

namespace Ruben_Booking.API.Migrations
{
    [DbContext(typeof(RubenContext))]
    [Migration("20241203102458_RubenDb")]
    partial class RubenDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ruben_Booking.API.Database.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Participants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Ruben_Booking.API.Database.Models.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserCredential")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Janne.Claesson@Firman.se",
                            Password = "wx09ehRK2UGh3/5fJdPqmp9a/Y2DWx6cmoEkaKuU854=",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "CSKED18372"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Jöns.Jönsson@Firman.se",
                            Password = "wx09ehRK2UGh3/5fJdPqmp9a/Y2DWx6cmoEkaKuU854=",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "CSAPD18372"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Martin.Beck@Firman.se",
                            Password = "wx09ehRK2UGh3/5fJdPqmp9a/Y2DWx6cmoEkaKuU854=",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "CSKAE18372"
                        });
                });

            modelBuilder.Entity("Ruben_Booking.API.Database.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserCredential")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Hasse.Jansson@Snut.se",
                            Password = "wO9z6fREqcI0DubZUixB5VCeu01MUUQDYCXylmRbziM=",
                            PhoneNumber = "0738239122",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "EOESK20393"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Klas.Fransson@Snut.se",
                            Password = "wO9z6fREqcI0DubZUixB5VCeu01MUUQDYCXylmRbziM=",
                            PhoneNumber = "0738115122",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "EAOKE90113"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Ruben.Rubensson@Snut.se",
                            Password = "wO9z6fREqcI0DubZUixB5VCeu01MUUQDYCXylmRbziM=",
                            PhoneNumber = "0728239622",
                            Salt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserCredential = "EKKLE10395"
                        });
                });

            modelBuilder.Entity("Ruben_Booking.API.Database.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWhiteBoard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInService")
                        .HasColumnType("bit");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Konferensrum 1",
                            HasProjector = true,
                            HasWhiteBoard = true,
                            IsInService = true,
                            MaxSeats = 8,
                            Name = "Sommarängen"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Konferensrum 2",
                            HasProjector = true,
                            HasWhiteBoard = false,
                            IsInService = true,
                            MaxSeats = 4,
                            Name = "Höstvinden"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Konferensrum 3",
                            HasProjector = false,
                            HasWhiteBoard = true,
                            IsInService = true,
                            MaxSeats = 6,
                            Name = "Vinterstugan"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Konferensrum 4",
                            HasProjector = true,
                            HasWhiteBoard = true,
                            IsInService = false,
                            MaxSeats = 6,
                            Name = "Vårsolen"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
